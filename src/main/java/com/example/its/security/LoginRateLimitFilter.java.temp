package com.example.its.security;

import io.github.bucket4j.Bandwidth;
import io.github.bucket4j.Bucket;
import io.github.bucket4j.Bucket4j;
import io.github.bucket4j.Refill;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.time.Duration;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * ログイン試行のレート制限フィルター
 * IPアドレス毎に5回/15分の制限を設ける
 */
@Slf4j
@Component
public class LoginRateLimitFilter extends OncePerRequestFilter {

    private final Map<String, Bucket> buckets = new ConcurrentHashMap<>();

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, 
                                    FilterChain filterChain) throws ServletException, IOException {
        
        // ログインPOSTリクエストのみ制限対象
        if (!isLoginAttempt(request)) {
            filterChain.doFilter(request, response);
            return;
        }

        String clientIp = getClientIpAddress(request);
        Bucket bucket = getBucket(clientIp);

        log.debug("ログイン試行レート制限チェック - IP: {}, 残り試行回数: {}", 
                 clientIp, bucket.getAvailableTokens());

        if (bucket.tryConsume(1)) {
            // 制限内の場合、リクエストを続行
            filterChain.doFilter(request, response);
        } else {
            // 制限に達した場合、エラーレスポンス
            log.warn("ログイン試行回数制限に達しました - IP: {}", clientIp);
            response.setStatus(HttpServletResponse.SC_TOO_MANY_REQUESTS);
            response.setContentType("application/json;charset=UTF-8");
            response.getWriter().write(
                "{\"error\":\"ログイン試行回数が上限に達しました。15分後に再試行してください。\"}"
            );
        }
    }

    /**
     * ログイン試行かどうかを判定
     */
    private boolean isLoginAttempt(HttpServletRequest request) {
        return "POST".equals(request.getMethod()) && 
               "/login".equals(request.getRequestURI());
    }

    /**
     * クライアントIPアドレスを取得
     */
    private String getClientIpAddress(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        return request.getRemoteAddr();
    }

    /**
     * IPアドレス毎のBucketを取得
     * 5回/15分の制限
     */
    private Bucket getBucket(String clientIp) {
        return buckets.computeIfAbsent(clientIp, this::createBucket);
    }

    private Bucket createBucket(String clientIp) {
        Bandwidth limit = Bandwidth.classic(5, Refill.intervally(5, Duration.ofMinutes(15)));
        return Bucket4j.builder()
                .addLimit(limit)
                .build();
    }
} 